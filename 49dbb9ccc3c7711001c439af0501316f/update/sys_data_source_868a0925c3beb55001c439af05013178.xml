<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_data_source">
    <sys_data_source action="INSERT_OR_UPDATE">
        <batch_size>1000</batch_size>
        <category/>
        <connection_override_last_success_time/>
        <connection_timeout>0</connection_timeout>
        <connection_url/>
        <connection_url_parameters/>
        <csv_delimiter/>
        <data_in_single_column>false</data_in_single_column>
        <data_loader><![CDATA[(function loadData(import_set_table) {

    var libarayGUID = new GlideRecord('u_plex');
    libarayGUID.addEncodedQuery('u_available_on_plex=true^u_active=true^sys_class_name=u_plex_tv_episodes^ORsys_class_name=u_plex_movies^ORsys_class_name=u_plex_tv_shows^u_keyISNOTEMPTY');
    libarayGUID.query();

    while (libarayGUID.next()) {

        var getRecordData = new sn_ws.RESTMessageV2('Plex', 'Plex Media Details');
        getRecordData.setStringParameterNoEscape('plexKey', libarayGUID.u_key + '');

        var response = getRecordData.execute();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();

        if (response.haveError()) {
			gs.log('Error - ' + response);
            return;
        }

        if (httpStatus == 200 || httpStatus == '200') {

            var recordData = JSON.parse(responseBody);
            processData(recordData.MediaContainer.Metadata);
        }
    }

    function processData(recordData) {

        for (var recordDataIdx = 0; recordDataIdx < recordData.length; recordDataIdx++) {

            var roleArray = [];
            var genreArray = [];
            var countryArray = [];
            var writerArray = [];
            var directorArray = [];
            var producerArray = [];

            var imdbRating;
            var tmdbRating;
            var rotTomRating;

            var imdbID;
            var tmdbID;
            var tvdbID;

            var roleRaw = recordData[recordDataIdx].Role;
            var genreRaw = recordData[recordDataIdx].Genre;
            var countryRaw = recordData[recordDataIdx].Country;
            var writerRaw = recordData[recordDataIdx].Writer;
            var directorRaw = recordData[recordDataIdx].Director;
            var producerRaw = recordData[recordDataIdx].Producer;
            var ratingRaw = recordData[recordDataIdx].Rating;
            var idRaw = recordData[recordDataIdx].Guid;

            for (var roleDataIdx = 0; roleDataIdx < roleRaw.length; roleDataIdx++) {

                roleArray.push(roleRaw[roleDataIdx].tag);

            }

            for (var genreDataIdx = 0; genreDataIdx < genreRaw.length; genreDataIdx++) {

                genreArray.push(genreRaw[genreDataIdx].tag);

            }

            for (var countryDataIdx = 0; countryDataIdx < countryRaw.length; countryDataIdx++) {

                countryArray.push(countryRaw[countryDataIdx].tag);

            }

            for (var writerDataIdx = 0; writerDataIdx < writerRaw.length; writerDataIdx++) {

                writerArray.push(writerRaw[writerDataIdx].tag);

            }

            for (var directorDataIdx = 0; directorDataIdx < directorRaw.length; directorDataIdx++) {

                directorArray.push(directorRaw[directorDataIdx].tag);

            }

            for (var producerDataIdx = 0; producerDataIdx < producerRaw.length; producerDataIdx++) {

                producerArray.push(producerRaw[producerDataIdx].tag);

            }

            for (var ratingDataIdx = 0; ratingDataIdx < ratingRaw.length; ratingDataIdx++) {

                var rateImage = ratingRaw[ratingDataIdx].image + '';
                var rateValue = ratingRaw[ratingDataIdx].value + '';
                var rateType = ratingRaw[ratingDataIdx].type + '';

                var splitImage = rateImage.slice(0, 4);

                switch (splitImage) {
                    case 'imdb':
                        imdbRating = rateValue;
                        break;
                    case 'rott':
                        if (rateType == 'audience') {
                            rotTomRating = rateValue;
                        }
                        break;
                    case 'them':
                        tmdbRating = rateValue;
                        break;
                    default:
                        var trashing = rateValue;
                }

            }

            for (var idDataIdx = 0; idDataIdx < idRaw.length; idDataIdx++) {

                var idCode = idRaw[idDataIdx].id + '';

                var splitID = idCode.slice(0, 4);
                switch (splitID) {
                    case 'imdb':
                        imdbID = idCode.split("//").pop();
                        break;
                    case 'tmdb':
                        tmdbID = idCode.split("//").pop();
                        break;
                    case 'tvdb':
                        tvdbID = idCode.split("//").pop();
                        break;
                    default:
                        var trashingID = idCode;
                }

            }

            roleArray.join();
            genreArray.join();
            countryArray.join();
            writerArray.join();
            directorArray.join();
            producerArray.join();

            var map = {

                u_year: recordData[recordDataIdx].year + '',
                u_key: recordData[recordDataIdx].ratingKey + '',
                u_title: recordData[recordDataIdx].title + '',
                u_producer: producerArray + '',
                u_genre: genreArray + '',
                u_country: countryArray + '',
                u_role: roleArray + '',
                u_writer: writerArray + '',
                u_director: directorArray + '',
                u_imdbRate: imdbRating + '',
                u_rotTomRate: rotTomRating + '',
                u_tmdbRate: tmdbRating + '',
                u_imdbID: imdbID + '',
                u_tmdbID: tmdbID + '',
                u_tvdbID: tvdbID + '',
                u_trashing: trashing + '',
                u_trashingID: trashingID + '',

            };

            import_set_table.insert(map);
			
        }

    }

})(import_set_table);]]></data_loader>
        <database_name/>
        <database_port/>
        <discard_arrays>true</discard_arrays>
        <expand_node_children>false</expand_node_children>
        <file_path/>
        <file_retrieval_method>Attachment</file_retrieval_method>
        <format>CSV</format>
        <glide_keystore>false</glide_keystore>
        <header_row>0</header_row>
        <import_set_table_label>Plex Media Details Import</import_set_table_label>
        <import_set_table_name>u_plex_media_details_import</import_set_table_name>
        <instance_name/>
        <jdbc_password/>
        <jdbc_server/>
        <jdbc_user_name/>
        <jpath_root_node/>
        <last_run_database_field/>
        <last_run_datetime/>
        <last_success_import_time>2023-12-02 10:41:55</last_success_import_time>
        <ldap_target/>
        <ldapprobe_result_set_rows>200</ldapprobe_result_set_rows>
        <limit/>
        <maximum_rows/>
        <mid_server/>
        <name>Plex Media Details</name>
        <offset>0</offset>
        <oracle_port>1521</oracle_port>
        <oracle_sid>orcl</oracle_sid>
        <parsing_script><![CDATA[// The input value can be accessed through the variables named "line", "lineNumber" and "result"
// The function uses result variable to return parse result back. 
(function(line,lineNumber,result) {
	// add code here
})(line,lineNumber,result);]]></parsing_script>
        <properties/>
        <query>All Rows from Table</query>
        <query_timeout>0</query_timeout>
        <request_action/>
        <scp_authentication>Username and Password</scp_authentication>
        <scp_password/>
        <scp_port/>
        <scp_server/>
        <scp_user_name/>
        <sheet_number>0</sheet_number>
        <sql_statement/>
        <ssh_keyfile_path/>
        <support_pagination>false</support_pagination>
        <sys_class_name>sys_data_source</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-28 22:28:02</sys_created_on>
        <sys_id>868a0925c3beb55001c439af05013178</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>Plex Media Details</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Plex">49dbb9ccc3c7711001c439af0501316f</sys_scope>
        <sys_update_name>sys_data_source_868a0925c3beb55001c439af05013178</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-06 20:43:45</sys_updated_on>
        <table_name/>
        <type>CUSTOM</type>
        <use_batch_import>false</use_batch_import>
        <use_integrated_authentication>false</use_integrated_authentication>
        <use_last_run_datetime>false</use_last_run_datetime>
        <xpath_root_node/>
        <zipped>false</zipped>
    </sys_data_source>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Plex">49dbb9ccc3c7711001c439af0501316f</claim_owner_scope>
        <claim_timestamp>18c40df4d780000001</claim_timestamp>
        <metadata_update_name>sys_data_source_868a0925c3beb55001c439af05013178</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>Plex</previous_claim_name>
        <previous_claim_scope>49dbb9ccc3c7711001c439af0501316f</previous_claim_scope>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-12-06 20:43:45</sys_created_on>
        <sys_id>a2efb984c30b711001c439af050131c0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-12-06 20:43:45</sys_updated_on>
    </sys_claim>
</record_update>
